# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-POLICY-MIB
# by libsmi2pysnmp-0.1.3 at Sat Oct 18 16:33:36 2014,
# Python version sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenPolicy, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenPolicy")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenPolicyMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 10, 0)).setRevisions(("2004-05-03 20:22","2004-05-03 00:00","2004-03-03 00:00","2003-08-13 00:00","2001-05-14 00:00",))
if mibBuilder.loadTexts: netscreenPolicyMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenPolicyMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenPolicyMibModule.setDescription("This module defines NetScreen private MIBs for Policy\nMonitoring")
nsPlyTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 10, 1))
if mibBuilder.loadTexts: nsPlyTable.setDescription("A firewall provides a network boundary with a single point of\nentry and exit-a choke point.You can screen and direct all that\ntraffic through the implementation of a set of access policies.\nAccess policies allow you to permit, deny, encrypt,\nauthenticate, prioritize, schedule, and monitor the traffic\nattemption to cross your firewall. This table collects all the\npolicy configuration information existing in NetScreen\nDevice.")
nsPlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1)).setIndexNames((0, "NETSCREEN-POLICY-MIB", "nsPlyVsys"), (0, "NETSCREEN-POLICY-MIB", "nsPlyId"))
if mibBuilder.loadTexts: nsPlyEntry.setDescription("Each entry in the nsPlyTable holds a set of configuration\nparameters associatied with an instance of policy.")
nsPlyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyId.setDescription("Each policy is identified by a unique policy ID.")
nsPlyVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyVsys.setDescription("Vitural system's name this polic entry belongs to.")
nsPlySrcZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlySrcZone.setDescription("Traffic through a firewall means that traffic flows from one\nsecurity zone to another. This object describes the source zone\nname traffic flow passes.")
nsPlyDstZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyDstZone.setDescription("Traffic through a firewall means that traffic flows from one\nsecurity zone to another. This object describes the destination\nzone name traffic flow passes.")
nsPlySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlySrcAddr.setDescription("Addresses are objects that identify network devices such as\nhosts  and networks by their location in relation to the\nfirwall on which security zone.To create an access policy for\nspecific addresses, you must first create entries for the\nrelevant hosts and networks in the  address book.Source IP\naddress indicates the address in source zone, 0.0.0.0 means any\naddress.")
nsPlyDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyDstAddr.setDescription("Addresses are objects that identify network devices such as\nhosts  and networks by their location in relation to the\nfirwall-on which security zone.To create an access policy for\nspecific addresses, you must first create entries for the\nrelevant hosts and networks in the  address book.Source IP\naddress indicates the address in destination  zone, 0.0.0.0\nmeans any address.")
nsPlyService = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(17,9,10,3,36,12,20,21,33,43,19,32,41,48,31,29,37,16,14,4,44,23,6,46,26,40,34,38,7,0,8,45,30,50,5,18,24,11,25,27,1,15,47,13,35,2,22,42,28,39,49,)).subtype(namedValues=NamedValues(("any", 0), ("aol", 1), ("h323", 10), ("http", 11), ("https", 12), ("icmp-info", 13), ("icmp-timestamp", 14), ("ike", 15), ("imap", 16), ("internet-locator-service", 17), ("irc", 18), ("l2tp", 19), ("bgp", 2), ("ldap", 20), ("mail", 21), ("netmeeting", 22), ("nfs", 23), ("nntp", 24), ("ns-global", 25), ("ns-global-pro", 26), ("ntp", 27), ("ospf", 28), ("pc-anywhere", 29), ("dpcp-relay", 3), ("ping", 30), ("pop3", 31), ("pptp", 32), ("real-media", 33), ("rip", 34), ("rlogin", 35), ("snmp", 36), ("ssh", 37), ("syslog", 38), ("talk", 39), ("dns", 4), ("tcp-any", 40), ("telnet", 41), ("tftp", 42), ("traceroute", 43), ("udp-any", 44), ("uucp", 45), ("vdo-live", 46), ("wais", 47), ("winframe", 48), ("x-windows", 49), ("finger", 5), ("other", 50), ("ftp", 6), ("ftp-get", 7), ("ftp-put", 8), ("gopher", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyService.setDescription("Sevices are objects that identify application protocols using\nlayer 4 information such as standard and accepted TCP and UDP\nport numbers for application services like  Telnet, FTP, SMTP\nand HTTP. This object indicates all the traffic service type\nthis  policy allows. 'Any' means all this policy allows all\nservice go through. 'Other' could be a configured service or\nnot in the list. See nsPlyServiceName for service  name.")
nsPlyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("deny", 0), ("permit", 1), ("tunnel", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyAction.setDescription("Actions objects that describe what the firewall does to the\ntraffic it receives. Permit allows the packet to pass the\nfirewall. Deny blocks the packet from traversing the firewall.\nTunnel encapsulates outgoing IP packets and decapsulates\nincoming IP packets.")
nsPlyNat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyNat.setDescription("You can apply NAT at the interface level or at the policy\nlevel. With policy-based NAT, you can translate the source\naddress on either incoming or outging network and  VPN traffic.\nThis object indicates if this is a policy-based NAT.")
nsPlyFixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyFixPort.setDescription("When in policy-based NAT, the new secure address can come from\neither a Dynamic IP  or from a Mapped IP. This object indicates\nif poliy-based NAT uses fix port when working on NAT mode.")
nsPlyDipId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyDipId.setDescription("This object indicates the Dynamic ID chosen for NAT policy.")
nsPlyVpnTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyVpnTunnel.setDescription("VPN tunnel this access policy applies to.")
nsPlyL2tpTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyL2tpTunnel.setDescription("L2TP tunnel this access policy applies to.")
nsPlyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyAuth.setDescription("This object indicates the selecting this option requires the\nuser at the source address to authenticate his/her identiry by\nsupplying a user name and password before traffic is allowed to\ngraverw the  firewall or enter the VPN tunnel.")
nsPlyLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyLogEnable.setDescription("When you enable logging in an access policy, the NetScreen\ndevice logs  all connections to which that paticular access\npolicy applies.")
nsPlyCountEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyCountEnable.setDescription("When you enable counting in an access plicy, the NetScreen\ndevice counts the total number of bytes of traffic to which\nthis access policy applies and records the informaiton in\nhistorical graphs.")
nsPlyAlarmBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyAlarmBPS.setDescription("User can set a threshold that triggers an alarm when the\ntraffic permitted by the access policy exceeds a specified\nnumber of bytes per second.")
nsPlyAlarmBPM = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyAlarmBPM.setDescription("User can set a threshold that triggers an alarm when the\ntraffic permitted by the access policy exceeds a specified\nnumber of bytes per Minute.")
nsPlySchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlySchedule.setDescription("By associating a schedule to an access policy, you can\ndetermine when the access policy is in effect.")
nsPlyTrafficShapeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyTrafficShapeEnable.setDescription("User can set parameters for the control and shaping of traffic\nfor each  access policy.")
nsPlyTrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,7,2,6,5,4,1,)).subtype(namedValues=NamedValues(("high", 0), ("priority2nd", 1), ("priority3rd", 2), ("priority4th", 3), ("priority5th", 4), ("priority6th", 5), ("priority7th", 6), ("priorityLow", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyTrafficPriority.setDescription("Traffic priority for this policy.")
nsPlyDSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disable", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyDSEnable.setDescription("Differentiated Services is a system for tagging traffic at a\nposition within a hierarchy of priority.")
nsPlyActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("inactive", 0), ("inuse", 1), ("hidden", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyActiveStatus.setDescription("Show the status of one policy entry.")
nsPlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyName.setDescription("policy name (optional)")
nsPlyServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyServiceName.setDescription("Sevices name that identify application protocols using\nlayer 4 information such as standard and accepted TCP and UDP\nport numbers for application services like  Telnet, FTP, SMTP\nand HTTP. This object indicates all the traffic service type\nthis  policy allows. 'Any' means all this policy allows all\nservice go through.")
nsPlyMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 10, 2))
if mibBuilder.loadTexts: nsPlyMonTable.setDescription("traffic information for the policy-based traffic.")
nsPlyMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1)).setIndexNames((0, "NETSCREEN-POLICY-MIB", "nsPlyMonId"), (0, "NETSCREEN-POLICY-MIB", "nsPlyMonVsys"))
if mibBuilder.loadTexts: nsPlyMonEntry.setDescription("An entry holds a set of traffic counters of a specific\npolicy.")
nsPlyMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonId.setDescription("Policy Id, also used as index in this table")
nsPlyMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonVsys.setDescription("vsys this policy belongs to")
nsPlyMonPackPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonPackPerSec.setDescription("Packets go through this policy per second")
nsPlyMonPackPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonPackPerMin.setDescription("Packets go through this policy per minute")
nsPlyMonTotalPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonTotalPacket.setDescription("total packets go through this policy")
nsPlyMonBytePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonBytePerSec.setDescription("Bytes go through this policy per second")
nsPlyMonBytePerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonBytePerMin.setDescription("Bytes go through this policy per minute")
nsPlyMonTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonTotalByte.setDescription("Total bytes go through this policy")
nsPlyMonSessionPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonSessionPerSec.setDescription("Sessions go through this policy per second")
nsPlyMonSessionPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonSessionPerMin.setDescription("Sessions go through this policy per minute")
nsPlyMonTotalSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPlyMonTotalSession.setDescription("Total Sessions go through this policy")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-POLICY-MIB", PYSNMP_MODULE_ID=netscreenPolicyMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-POLICY-MIB", netscreenPolicyMibModule=netscreenPolicyMibModule, nsPlyTable=nsPlyTable, nsPlyEntry=nsPlyEntry, nsPlyId=nsPlyId, nsPlyVsys=nsPlyVsys, nsPlySrcZone=nsPlySrcZone, nsPlyDstZone=nsPlyDstZone, nsPlySrcAddr=nsPlySrcAddr, nsPlyDstAddr=nsPlyDstAddr, nsPlyService=nsPlyService, nsPlyAction=nsPlyAction, nsPlyNat=nsPlyNat, nsPlyFixPort=nsPlyFixPort, nsPlyDipId=nsPlyDipId, nsPlyVpnTunnel=nsPlyVpnTunnel, nsPlyL2tpTunnel=nsPlyL2tpTunnel, nsPlyAuth=nsPlyAuth, nsPlyLogEnable=nsPlyLogEnable, nsPlyCountEnable=nsPlyCountEnable, nsPlyAlarmBPS=nsPlyAlarmBPS, nsPlyAlarmBPM=nsPlyAlarmBPM, nsPlySchedule=nsPlySchedule, nsPlyTrafficShapeEnable=nsPlyTrafficShapeEnable, nsPlyTrafficPriority=nsPlyTrafficPriority, nsPlyDSEnable=nsPlyDSEnable, nsPlyActiveStatus=nsPlyActiveStatus, nsPlyName=nsPlyName, nsPlyServiceName=nsPlyServiceName, nsPlyMonTable=nsPlyMonTable, nsPlyMonEntry=nsPlyMonEntry, nsPlyMonId=nsPlyMonId, nsPlyMonVsys=nsPlyMonVsys, nsPlyMonPackPerSec=nsPlyMonPackPerSec, nsPlyMonPackPerMin=nsPlyMonPackPerMin, nsPlyMonTotalPacket=nsPlyMonTotalPacket, nsPlyMonBytePerSec=nsPlyMonBytePerSec, nsPlyMonBytePerMin=nsPlyMonBytePerMin, nsPlyMonTotalByte=nsPlyMonTotalByte, nsPlyMonSessionPerSec=nsPlyMonSessionPerSec, nsPlyMonSessionPerMin=nsPlyMonSessionPerMin, nsPlyMonTotalSession=nsPlyMonTotalSession)

